{
  "hash": "60f1f5f47c570bb766f1900bb1b8bf26",
  "result": {
    "engine": "knitr",
    "markdown": "# Lösungswege zu den Aufgaben für EinsteigerInnen {#sec-LoesungAnfang}\n\n::: {.callout-warning appearance=\"simple\"}\nGerade als Anfänger:in sollten Sie zumindest *versuchen*, die Aufgaben selbstständig zu lösen, bevor Sie sich die Lösungswege anschauen. Kopf hoch, Sie schaffen das!\n:::\n\n## Lösungen zu Objekten in R {#sec-LoesungenAnfangA}\n\n### Lösung zur Aufgabe [-@sec-AAA01] Vektoren {#sec-LAA01}\n::: {.callout-tip}\n## a) Erzeugen Sie mit möglichst wenig Aufwand einen Datenvektor aus den Zahlen 1 bis 100.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzahlen <- c(1:100)\n#anschauen\nzahlen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Erzeugen Sie einen Datenvektor, der aus den Wörtern \"Apfel\", \"Birne\" und \"Postauto\" besteht.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworte <- c(\"Apfel\", \"Birne\", \"Postauto\")\n# anschauen\nworte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apfel\"    \"Birne\"    \"Postauto\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## c) Erzeugen Sie einen weiteren Datenvektor, in welchem die Wörter \"Apfel\", \"Birne\" und \"Postauto\" 30 mal wiederholt werden.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mit rep() 30mal \"worte\" wiederholen\nworte30 <- rep(worte, 30)\n# anschauen\nworte30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n [7] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[13] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[19] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[25] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[31] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[37] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[43] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[49] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[55] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[61] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[67] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[73] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[79] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[85] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA02] Zufallsvektoren {#sec-LAA02}\n\n::: {.callout-tip}\n## a) Erzeugen Sie einen Datenvektor aus 200 zufälligen Zahlen zwischen 1 und 500, ohne dass eine Zahl doppelt vorkommt (sog. \"ohne zurücklegen\").\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:500, 200, replace = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 231 270 239 327 424  88 336 421 302  77 464  87 439 322 223 175 276 376\n [19] 183 391 164 252  17 220 201 379 466 323  91 147 486  49 114 332 132 186\n [37] 236 312  57 427  66 153 344 225 250 219 247  96 432 405 195 261 167 386\n [55]  97 417  51 159 326  39 370 203  68 385 233 369 129  33 174 150 495  22\n [73] 257  28 177 358 205 368 399 347 297  83 315 465   7 212 165  84 300 422\n [91] 489 126  78 494 119 215 229  67  36  74 266 382  10 393 137  60 377 463\n[109] 447 309 473 443 299 292 120 146 354 383 135  69  18 361 331  92 227 472\n[127] 109 241  93 333  75   6 163 211  56  80 248 155  43 131 305 392 355 467\n[145] 136 293 104 245  52 408 410 356 144 452 437 492 154 430  64 366 423 290\n[163] 455 226 357 367 456 444 113 498 235 441 185 134 158 488 251 431 341 108\n[181] 411 198   4  55 343  32 181 487 480  54 279 335 483 101 214 459 460 438\n[199] 359 396\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Erzeugen Sie einen weiteren Datenvektor mit ebenfalls 200 zufälligen Zahlen zwischen 1 und 500, wobei Zahlen nun doppelt vorkommen dürfen (sog. \"mit zurücklegen\").\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:500, 200, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]  96 436  85 230   2 148 220 146 463 494 177 292 324 174 194 290 274 488\n [19]  17 500 220 206 250 279 307 265 500 456  24  34 253 137  80 281 470 197\n [37] 277 396   8 295 440  25 157  24 350 141 263 486 281 228 216 230 454 255\n [55] 243 432  70 460 455 170 473 165 412   8 369 354 205 312 208  31 470 441\n [73]  49   6 479 272 103 351 118  73 383 386 176 402 494 422  66  67 168 496\n [91]  99 434 493  47 108 492 461 148 482 286   9 243 351 262 407 325 252 165\n[109] 232 377 146 340  41 462 280 472   4  95  26   9  30 110  86 473 485  39\n[127] 277 336 364 211 153 306 257 138  99 409 370 229   8  81 438 114 407 256\n[145] 443 314  35 237 100 445 394 179 248 101 160 296  92 295 280 465 136  65\n[163]  42 402 383 441 110 358  56  65 457 230 331  50 251 359 317 150 409 380\n[181] 142 466 249 395 464  74 486 321 325 343  89 414  38 233 349 420 113 216\n[199] 284 377\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA03] Krankenhausaufenthalte {#sec-LAA03}\n\n::: {.callout-tip}\n## a) Überführen Sie die Daten in ein R-Objekt mit dem Namen `KHAufenthalte`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKHAufenthalte <- c(1,0,0,3,1,5,1,2,2,0,1,0,5,2,1,0,1,0,0,4,0,1,1,3,0,\n                   1,1,1,3,1,0,1,4,2,0,3,1,1,7,2,0,2,1,3,0,0,0,0,6,1,\n                   1,2,1,0,1,0,3,0,1,3,0,5,2,1,0,2,4,0,1,1,3,0,1,2,1,\n                   1,1,1,2,2,0,3,0,1,0,1,0,0,0,5,0,4,1,2,2,7,1,3,1,5)\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 1 0 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1\n [38] 1 7 2 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2\n [75] 1 1 1 1 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## b) Entfernen Sie den ersten und den dritten Eintrag aus Ihrem R-Objekt.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ersten und dritten Wert enfernen\nKHAufenthalte <- KHAufenthalte[-c(1,3)]\n\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1 1 7 2\n[39] 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2 1 1 1 1\n[77] 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## c) Fügen Sie die Werte $7$ und $2$ dem Objekt hinzu.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 7 und 2 hinzufügen\nKHAufenthalte <- c(KHAufenthalte, 7, 2)\n\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1 1 7\n [38] 2 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2 1 1\n [75] 1 1 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5 7 2\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## d) Benennen Sie das Objekt in `hospital.stays` um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# umbenennen\nhospital.stays <- KHAufenthalte\n```\n:::\n\n\n\n\n:::\n\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA04] Größe und Gewicht {#sec-LAA04}\n\n::: {.callout-tip}\n## a) Überführen Sie die Daten in R-Objekte mit den Namen `Groesse` und `Gewicht`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGroesse <- c(1.68, 1.87, 1.95, 1.74, 1.80,\n             1.75, 1.59, 1.77, 1.82, 1.74)\n\nGewicht <- c(78500, 110100, 97500, 69200, 82500,\n             71500,  81500, 87200, 75500, 65500)\n\n# anzeigen\nGroesse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.68 1.87 1.95 1.74 1.80 1.75 1.59 1.77 1.82 1.74\n```\n\n\n:::\n\n```{.r .cell-code}\nGewicht\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  78500 110100  97500  69200  82500  71500  81500  87200  75500  65500\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## b) Rechnen Sie das Gewicht um in Kilogramm, und speichern Sie Ihr Ergebnis in der Variable `Kilogramm`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rechne Gramm in Kilogramm um \nKilogramm <-  Gewicht/1000\n\n# anzeigen\nKilogramm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  78.5 110.1  97.5  69.2  82.5  71.5  81.5  87.2  75.5  65.5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## c) Berechnen Sie den BMI (kg/m^2^) der Probanden und speichern Ihr Ergebnis in das Objekt `BMI`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# BMI berechnen \nBMI <-  Kilogramm / (Groesse^2)\n\n# anzeigen\nBMI\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 27.81321 31.48503 25.64103 22.85639 25.46296 23.34694 32.23765 27.83364\n [9] 22.79314 21.63430\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## d) Fügen Sie die Objekte `Groesse`, `Gewicht` (aber in Kilogramm) und `BMI` zu einem Datenframe zusammen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Datenframe erzeugen\ndf <- data.frame(Groesse, Gewicht=Kilogramm, BMI)\n\n# anzeigen\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Groesse Gewicht      BMI\n1     1.68    78.5 27.81321\n2     1.87   110.1 31.48503\n3     1.95    97.5 25.64103\n4     1.74    69.2 22.85639\n5     1.80    82.5 25.46296\n6     1.75    71.5 23.34694\n7     1.59    81.5 32.23765\n8     1.77    87.2 27.83364\n9     1.82    75.5 22.79314\n10    1.74    65.5 21.63430\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA05] ordinale Faktoren {#sec-LAA05}\n\n::: {.callout-tip}\n## a) Erstellen Sie die ordinale Variable `Monate`, in welcher die 12 ausgeschriebenen Monatsnamen in korrekter Levelreihenfolge enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\nMonate <- factor(c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n                 \"Juli\", \"August\", \"September\", \"Oktober\", \"November\",\n                 \"Dezember\"), \n                 levels= c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \n                           \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \n                           \"November\", \"Dezember\"),\n                 ordered=TRUE )\n\n# anzeigen  \nMonate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Januar    Februar   März      April     Mai       Juni      Juli     \n [8] August    September Oktober   November  Dezember \n12 Levels: Januar < Februar < März < April < Mai < Juni < Juli < ... < Dezember\n```\n\n\n:::\n:::\n\n\n\n\n\nWir können uns aber auch ein bisschen Schreibarbeit ersparen.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hilfsvektor erzeugen\ndummy <- c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \n           \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\")\n# ordinaler Faktor\nMonate <- factor(dummy, levels=dummy, ordered=TRUE)\n\n# anzeigen  \nMonate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Januar    Februar   März      April     Mai       Juni      Juli     \n [8] August    September Oktober   November  Dezember \n12 Levels: Januar < Februar < März < April < Mai < Juni < Juli < ... < Dezember\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n::: {.callout-tip}\n## b) Erstellen Sie die ordinale Variable `Schulnoten`, in welcher die 6 ausgeschriebenen Schulnoten  in korrekter Levelreihenfolge  enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\n# Achten Sie auf die Reihenfolge der Schulnoten,\n# wir müssen mit der schlechtesten anfangen.\nSchulnoten <- c(\"ungenügend\", \"mangelhaft\", \"ausreichend\", \"befriedigend\",\n                \"gut\", \"sehr gut\")\nSchulnoten <- factor(Schulnoten, levels=Schulnoten, ordered=TRUE)\n\n# anzeigen\nSchulnoten\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] ungenügend   mangelhaft   ausreichend  befriedigend gut         \n[6] sehr gut    \n6 Levels: ungenügend < mangelhaft < ausreichend < befriedigend < ... < sehr gut\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## c) Erzeugen Sie aus den folgenden Daten einen ordinalen Faktor mit korrekter Levelreihenfolge\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\nf <- factor(c(\"vielleicht\", \"glaube nicht\", \"nein\", \"glaube nicht\", \"ja\", \n              \"glaube schon\", \"vielleicht\", \"nein\", \"glaube nicht\", \"ja\", \n              \"ja\", \"glaube schon\", \"ja\", \"ja\", \"nein\", \"glaube nicht\", \n              \"glaube schon\", \"vielleicht\", \"vielleicht\", \"glaube nicht\"),\n            levels=c(\"nein\", \"glaube nicht\", \"vielleicht\", \"glaube schon\", \"ja\"), \n            ordered=TRUE)\n# anzeigen\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] vielleicht   glaube nicht nein         glaube nicht ja          \n [6] glaube schon vielleicht   nein         glaube nicht ja          \n[11] ja           glaube schon ja           ja           nein        \n[16] glaube nicht glaube schon vielleicht   vielleicht   glaube nicht\nLevels: nein < glaube nicht < vielleicht < glaube schon < ja\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA06] Hogwarts-Kurse {#sec-LAA06}\n\n::: {.callout-tip}\n## a) Erstellen Sie das Datenframe `Kurse`, in welchem die Daten aus den Tabellenspalten `Haus` und `Kurs` enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten übertragen\nKurse <- data.frame(\n  Haus = c(\"Gryffindor\", \"Gryffindor\", \"Gryffindor\", \"Gryffindor\",\n           \"Hufflepuff\", \"Hufflepuff\", \"Hufflepuff\", \"Hufflepuff\",\n           \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\",\n           \"Slytherin\", \"Slytherin\", \"Slytherin\", \"Slytherin\"),\n  Kurs = c(\"Verteidigung gegen die dunklen Künste\", \"Zauberkunst\", \n           \"Verwandlung\", \"Besenflugunterricht\",\n           \"Kräuterkunde\", \"Pflege magischer Geschöpfe\", \n           \"Geschichte der Zauberei\", \"Alte Runen\",\n           \"Arithmantik\", \"Astronomie\", \n           \"Verwandlung\", \"Verteidigung gegen die dunklen Künste\",\n           \"Zaubertränke\", \"Zauberkunst\", \n           \"Dunkle Künste\", \"Legilimentik\")\n)\n# anzeigen  \nKurse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Haus                                  Kurs\n1  Gryffindor Verteidigung gegen die dunklen Künste\n2  Gryffindor                           Zauberkunst\n3  Gryffindor                           Verwandlung\n4  Gryffindor                   Besenflugunterricht\n5  Hufflepuff                          Kräuterkunde\n6  Hufflepuff            Pflege magischer Geschöpfe\n7  Hufflepuff               Geschichte der Zauberei\n8  Hufflepuff                            Alte Runen\n9   Ravenclaw                           Arithmantik\n10  Ravenclaw                            Astronomie\n11  Ravenclaw                           Verwandlung\n12  Ravenclaw Verteidigung gegen die dunklen Künste\n13  Slytherin                          Zaubertränke\n14  Slytherin                           Zauberkunst\n15  Slytherin                         Dunkle Künste\n16  Slytherin                          Legilimentik\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Stellen Sie sicher, dass Ihre Variablen das korrekte Skalenniveau aufweisen.\n\nDa es sich um nominale Daten handelt, sollten sie als Faktoren gespeichert werden.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# überprüfen\nstr(Kurse)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t16 obs. of  2 variables:\n $ Haus: chr  \"Gryffindor\" \"Gryffindor\" \"Gryffindor\" \"Gryffindor\" ...\n $ Kurs: chr  \"Verteidigung gegen die dunklen Künste\" \"Zauberkunst\" \"Verwandlung\" \"Besenflugunterricht\" ...\n```\n\n\n:::\n:::\n\n\n\n\nBeide Variablen sind vom Typ `charakter`. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wandle in Faktoren um\nKurse$Haus <- factor(Kurse$Haus)\nKurse$Kurs <- factor(Kurse$Kurs)\n\n# überprüfen\nstr(Kurse)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t16 obs. of  2 variables:\n $ Haus: Factor w/ 4 levels \"Gryffindor\",\"Hufflepuff\",..: 1 1 1 1 2 2 2 2 3 3 ...\n $ Kurs: Factor w/ 13 levels \"Alte Runen\",\"Arithmantik\",..: 10 12 11 4 7 9 6 1 2 3 ...\n```\n\n\n:::\n:::\n\n\n\n\nBeide Variablen sind nun Faktoren.\n\n:::\n\n\n::: {.callout-tip}\n## c) Erstellen Sie für jedes Haus ein eigenes Datenframe\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subsets erstellen\ngryffindor <- subset(Kurse, Haus==\"Gryffindor\")\nhufflepuff <- subset(Kurse, Haus==\"Hufflepuff\")\nravenclaw <- subset(Kurse, Haus==\"Ravenclaw\")\nslytherin <- subset(Kurse, Haus==\"Slytherin\")\n```\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## d) Wandeln Sie in jedem Haus-Datenframe die Variablen in Faktoren um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subsets erstellen\ngryffindor$Kurs <- factor(gryffindor$Kurs)\ngryffindor$Haus <- factor(gryffindor$Haus)\n\nhufflepuff$Kurs <- factor(hufflepuff$Kurs)\nhufflepuff$Haus <- factor(hufflepuff$Haus)\n\nravenclaw$Kurs <- factor(ravenclaw$Kurs)\nravenclaw$Haus <- factor(ravenclaw$Haus)\n\nslytherin$Kurs <- factor(slytherin$Kurs)\nslytherin$Haus <- factor(slytherin$Haus)\n```\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## e) Fügen Sie die Haus-Datenframes zu einem einzigen Datenframe `Hogwarts` zusammen. Ändern Sie anschließend den Kurs \"*Geschichte der Zauberei*\" in \"*Zauberkunst*\" um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Zusammenführen\nHogwarts <- rbind(gryffindor, hufflepuff, ravenclaw, slytherin)\n\n# Level ändern\nlevels(Hogwarts$Kurs)[levels(Hogwarts$Kurs)==\"Geschichte der Zauberei\"] <- \"Geisterkunde\"\n\n# anzeigen\nHogwarts$Kurs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Verteidigung gegen die dunklen Künste Zauberkunst                          \n [3] Verwandlung                           Besenflugunterricht                  \n [5] Kräuterkunde                          Pflege magischer Geschöpfe           \n [7] Geisterkunde                          Alte Runen                           \n [9] Arithmantik                           Astronomie                           \n[11] Verwandlung                           Verteidigung gegen die dunklen Künste\n[13] Zaubertränke                          Zauberkunst                          \n[15] Dunkle Künste                         Legilimentik                         \n13 Levels: Besenflugunterricht ... Zaubertränke\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}