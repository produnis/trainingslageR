{
  "hash": "3493fdb2d4115510bc97612bdf3f8760",
  "result": {
    "engine": "knitr",
    "markdown": "# Lösungswege zu den Aufgaben für EinsteigerInnen {#sec-LoesungAnfang}\n\n::: {.callout-warning appearance=\"simple\"}\nGerade als Anfänger:in sollten Sie zumindest *versuchen*, die Aufgaben selbstständig zu lösen, bevor Sie sich die Lösungswege anschauen. Kopf hoch, Sie schaffen das!\n:::\n\n## Lösungen zu Objekten in R {#sec-LoesungenAnfangA}\n\n### Lösung zur Aufgabe [-@sec-AAA01] Vektoren {#sec-LAA01}\n::: {.callout-tip}\n## a) Erzeugen Sie mit möglichst wenig Aufwand einen Datenvektor aus den Zahlen 1 bis 100.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzahlen <- c(1:100)\n#anschauen\nzahlen\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Erzeugen Sie einen Datenvektor, der aus den Wörtern \"Apfel\", \"Birne\" und \"Postauto\" besteht.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworte <- c(\"Apfel\", \"Birne\", \"Postauto\")\n# anschauen\nworte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Apfel\"    \"Birne\"    \"Postauto\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## c) Erzeugen Sie einen weiteren Datenvektor, in welchem die Wörter \"Apfel\", \"Birne\" und \"Postauto\" 30 mal wiederholt werden.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mit rep() 30mal \"worte\" wiederholen\nworte30 <- rep(worte, 30)\n# anschauen\nworte30\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n [7] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[13] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[19] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[25] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[31] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[37] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[43] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[49] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[55] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[61] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[67] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[73] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[79] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n[85] \"Apfel\"    \"Birne\"    \"Postauto\" \"Apfel\"    \"Birne\"    \"Postauto\"\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA02] Zufallsvektoren {#sec-LAA02}\n\n::: {.callout-tip}\n## a) Erzeugen Sie einen Datenvektor aus 200 zufälligen Zahlen zwischen 1 und 500, ohne dass eine Zahl doppelt vorkommt (sog. \"ohne zurücklegen\").\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:500, 200, replace = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 158 354  37 321 289  53  39  22 474 400 442 246 466 199  85 404 454  59\n [19]  70 207 305 196 214 423 373 256 439  88 346 269 443 266 438  40 495 448\n [37]  60 260  29  25 341 478 419 121 136  13 396 231 378 179 388  17 113 241\n [55] 460 194  69 348 319 129 274 126 489 405 186 471  74 268 118  98  36  72\n [73] 487 182 416 282 203 187 183 175   2  76 114 204  11 376 445 425 358   5\n [91]  63 166 191  71 431 112 216 286 352 168 271 258 467 257 339 275 142 131\n[109] 451  12 424 368 325 500 340 406  81 429 169 247 138 252 377 383 153   8\n[127] 398  14 223 364 221 261 494  75 309 304 249 499 197 366 195 462 253 360\n[145] 362 239 165 300 172  46 242 374 101 100  61 433 201  62 387  10 496  30\n[163]  79 295  16  28 262 229 422  94 167 218 477 281 427 470 109 476 320 468\n[181] 407 254 193 125 370 331 313 190  51 240  67 412 395 469 232 481 115 435\n[199] 155 192\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Erzeugen Sie einen weiteren Datenvektor mit ebenfalls 200 zufälligen Zahlen zwischen 1 und 500, wobei Zahlen nun doppelt vorkommen dürfen (sog. \"mit zurücklegen\").\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:500, 200, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 186  82 173 350 498 231 468 146 320 351  14 492 163 302 306 168 165 401\n [19] 214  35  22 450 214 178 409  62  41 409 352 182 113 348 101 364  78 145\n [37] 461 151 200 497 229  11   4  40 416 243 258 172  52 128 153 373 147 103\n [55] 246  37 228  53 160 425 111 244  86 294  70 246  48 267 225 265 216 400\n [73] 372  92 379 337 402 130  92 406 243  79 203 422 103 113 179 304 381 106\n [91] 360  54 416 410 477  89 337 435 296 229 246 479  84 233  80 236 389 153\n[109] 230  51 155  14  32 189 477 173 191 435 403 371 272 339 462 321 285 450\n[127] 476 142 150 282 146 186 126 437 268 426 289 249 410 110 316 293 209 184\n[145] 454 182 262 289 149 301  37 116  62 332  79 450 249 281 118 466 340 158\n[163] 405 406  43   1 195 225 211 110  96 471 417 415 266 366 375 334  20 274\n[181] 227 468 401 424  42 374 115 320 404  71  94 176 431 328 122 221  84  50\n[199] 358  47\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA03] Krankenhausaufenthalte {#sec-LAA03}\n\n::: {.callout-tip}\n## a) Überführen Sie die Daten in ein R-Objekt mit dem Namen `KHAufenthalte`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKHAufenthalte <- c(1,0,0,3,1,5,1,2,2,0,1,0,5,2,1,0,1,0,0,4,0,1,1,3,0,\n                   1,1,1,3,1,0,1,4,2,0,3,1,1,7,2,0,2,1,3,0,0,0,0,6,1,\n                   1,2,1,0,1,0,3,0,1,3,0,5,2,1,0,2,4,0,1,1,3,0,1,2,1,\n                   1,1,1,2,2,0,3,0,1,0,1,0,0,0,5,0,4,1,2,2,7,1,3,1,5)\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 1 0 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1\n [38] 1 7 2 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2\n [75] 1 1 1 1 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## b) Entfernen Sie den ersten und den dritten Eintrag aus Ihrem R-Objekt.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ersten und dritten Wert enfernen\nKHAufenthalte <- KHAufenthalte[-c(1,3)]\n\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1 1 7 2\n[39] 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2 1 1 1 1\n[77] 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## c) Fügen Sie die Werte $7$ und $2$ dem Objekt hinzu.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 7 und 2 hinzufügen\nKHAufenthalte <- c(KHAufenthalte, 7, 2)\n\n#anschauen\nKHAufenthalte\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 0 3 1 5 1 2 2 0 1 0 5 2 1 0 1 0 0 4 0 1 1 3 0 1 1 1 3 1 0 1 4 2 0 3 1 1 7\n [38] 2 0 2 1 3 0 0 0 0 6 1 1 2 1 0 1 0 3 0 1 3 0 5 2 1 0 2 4 0 1 1 3 0 1 2 1 1\n [75] 1 1 2 2 0 3 0 1 0 1 0 0 0 5 0 4 1 2 2 7 1 3 1 5 7 2\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## d) Benennen Sie das Objekt in `hospital.stays` um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# umbenennen\nhospital.stays <- KHAufenthalte\n```\n:::\n\n\n\n\n:::\n\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA04] Größe und Gewicht {#sec-LAA04}\n\n::: {.callout-tip}\n## a) Überführen Sie die Daten in R-Objekte mit den Namen `Groesse` und `Gewicht`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGroesse <- c(1.68, 1.87, 1.95, 1.74, 1.80,\n             1.75, 1.59, 1.77, 1.82, 1.74)\n\nGewicht <- c(78500, 110100, 97500, 69200, 82500,\n             71500,  81500, 87200, 75500, 65500)\n\n# anzeigen\nGroesse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1.68 1.87 1.95 1.74 1.80 1.75 1.59 1.77 1.82 1.74\n```\n\n\n:::\n\n```{.r .cell-code}\nGewicht\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  78500 110100  97500  69200  82500  71500  81500  87200  75500  65500\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: {.callout-tip}\n## b) Rechnen Sie das Gewicht um in Kilogramm, und speichern Sie Ihr Ergebnis in der Variable `Kilogramm`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rechne Gramm in Kilogramm um \nKilogramm <-  Gewicht/1000\n\n# anzeigen\nKilogramm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  78.5 110.1  97.5  69.2  82.5  71.5  81.5  87.2  75.5  65.5\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## c) Berechnen Sie den BMI (kg/m^2^) der Probanden und speichern Ihr Ergebnis in das Objekt `BMI`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# BMI berechnen \nBMI <-  Kilogramm / (Groesse^2)\n\n# anzeigen\nBMI\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 27.81321 31.48503 25.64103 22.85639 25.46296 23.34694 32.23765 27.83364\n [9] 22.79314 21.63430\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## d) Fügen Sie die Objekte `Groesse`, `Gewicht` (aber in Kilogramm) und `BMI` zu einem Datenframe zusammen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Datenframe erzeugen\ndf <- data.frame(Groesse, Gewicht=Kilogramm, BMI)\n\n# anzeigen\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Groesse Gewicht      BMI\n1     1.68    78.5 27.81321\n2     1.87   110.1 31.48503\n3     1.95    97.5 25.64103\n4     1.74    69.2 22.85639\n5     1.80    82.5 25.46296\n6     1.75    71.5 23.34694\n7     1.59    81.5 32.23765\n8     1.77    87.2 27.83364\n9     1.82    75.5 22.79314\n10    1.74    65.5 21.63430\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {.callout-tip}\n## e) Lassen Sie die Daten von Proband 4, 7 und 9 ausgeben.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[c(4, 7, 9),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Groesse Gewicht      BMI\n4    1.74    69.2 22.85639\n7    1.59    81.5 32.23765\n9    1.82    75.5 22.79314\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {.callout-tip}\n## f) Lassen Sie die Daten der Probanden ausgeben, deren Gewicht größer ist als 80kg.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf[df$Gewicht > 80 , ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Groesse Gewicht      BMI\n2    1.87   110.1 31.48503\n3    1.95    97.5 25.64103\n5    1.80    82.5 25.46296\n7    1.59    81.5 32.23765\n8    1.77    87.2 27.83364\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA05] ordinale Faktoren {#sec-LAA05}\n\n::: {.callout-tip}\n## a) Erstellen Sie die ordinale Variable `Monate`, in welcher die 12 ausgeschriebenen Monatsnamen in korrekter Levelreihenfolge enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\nMonate <- factor(c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\",\n                 \"Juli\", \"August\", \"September\", \"Oktober\", \"November\",\n                 \"Dezember\"), \n                 levels= c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \n                           \"Juni\", \"Juli\", \"August\", \"September\", \"Oktober\", \n                           \"November\", \"Dezember\"),\n                 ordered=TRUE )\n\n# anzeigen  \nMonate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Januar    Februar   März      April     Mai       Juni      Juli     \n [8] August    September Oktober   November  Dezember \n12 Levels: Januar < Februar < März < April < Mai < Juni < Juli < ... < Dezember\n```\n\n\n:::\n:::\n\n\n\n\n\nWir können uns aber auch ein bisschen Schreibarbeit ersparen.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hilfsvektor erzeugen\ndummy <- c(\"Januar\", \"Februar\", \"März\", \"April\", \"Mai\", \"Juni\", \"Juli\", \n           \"August\", \"September\", \"Oktober\", \"November\", \"Dezember\")\n# ordinaler Faktor\nMonate <- factor(dummy, levels=dummy, ordered=TRUE)\n\n# anzeigen  \nMonate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Januar    Februar   März      April     Mai       Juni      Juli     \n [8] August    September Oktober   November  Dezember \n12 Levels: Januar < Februar < März < April < Mai < Juni < Juli < ... < Dezember\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n::: {.callout-tip}\n## b) Erstellen Sie die ordinale Variable `Schulnoten`, in welcher die 6 ausgeschriebenen Schulnoten  in korrekter Levelreihenfolge  enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\n# Achten Sie auf die Reihenfolge der Schulnoten,\n# wir müssen mit der schlechtesten anfangen.\nSchulnoten <- c(\"ungenügend\", \"mangelhaft\", \"ausreichend\", \"befriedigend\",\n                \"gut\", \"sehr gut\")\nSchulnoten <- factor(Schulnoten, levels=Schulnoten, ordered=TRUE)\n\n# anzeigen\nSchulnoten\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] ungenügend   mangelhaft   ausreichend  befriedigend gut         \n[6] sehr gut    \n6 Levels: ungenügend < mangelhaft < ausreichend < befriedigend < ... < sehr gut\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## c) Erzeugen Sie aus den folgenden Daten einen ordinalen Faktor mit korrekter Levelreihenfolge\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinaler Faktor\nf <- factor(c(\"vielleicht\", \"glaube nicht\", \"nein\", \"glaube nicht\", \"ja\", \n              \"glaube schon\", \"vielleicht\", \"nein\", \"glaube nicht\", \"ja\", \n              \"ja\", \"glaube schon\", \"ja\", \"ja\", \"nein\", \"glaube nicht\", \n              \"glaube schon\", \"vielleicht\", \"vielleicht\", \"glaube nicht\"),\n            levels=c(\"nein\", \"glaube nicht\", \"vielleicht\", \"glaube schon\", \"ja\"), \n            ordered=TRUE)\n# anzeigen\nf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] vielleicht   glaube nicht nein         glaube nicht ja          \n [6] glaube schon vielleicht   nein         glaube nicht ja          \n[11] ja           glaube schon ja           ja           nein        \n[16] glaube nicht glaube schon vielleicht   vielleicht   glaube nicht\nLevels: nein < glaube nicht < vielleicht < glaube schon < ja\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\\newpage\n\n### Lösung zur Aufgabe [-@sec-AAA06] Hogwarts-Kurse {#sec-LAA06}\n\n::: {.callout-tip}\n## a) Erstellen Sie das Datenframe `Kurse`, in welchem die Daten aus den Tabellenspalten `Haus` und `Kurs` enthalten sind.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten übertragen\nKurse <- data.frame(\n  Haus = c(\"Gryffindor\", \"Gryffindor\", \"Gryffindor\", \"Gryffindor\",\n           \"Hufflepuff\", \"Hufflepuff\", \"Hufflepuff\", \"Hufflepuff\",\n           \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\", \"Ravenclaw\",\n           \"Slytherin\", \"Slytherin\", \"Slytherin\", \"Slytherin\"),\n  Kurs = c(\"Verteidigung gegen die dunklen Künste\", \"Zauberkunst\", \n           \"Verwandlung\", \"Besenflugunterricht\",\n           \"Kräuterkunde\", \"Pflege magischer Geschöpfe\", \n           \"Geschichte der Zauberei\", \"Alte Runen\",\n           \"Arithmantik\", \"Astronomie\", \n           \"Verwandlung\", \"Verteidigung gegen die dunklen Künste\",\n           \"Zaubertränke\", \"Zauberkunst\", \n           \"Dunkle Künste\", \"Legilimentik\")\n)\n# anzeigen  \nKurse\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Haus                                  Kurs\n1  Gryffindor Verteidigung gegen die dunklen Künste\n2  Gryffindor                           Zauberkunst\n3  Gryffindor                           Verwandlung\n4  Gryffindor                   Besenflugunterricht\n5  Hufflepuff                          Kräuterkunde\n6  Hufflepuff            Pflege magischer Geschöpfe\n7  Hufflepuff               Geschichte der Zauberei\n8  Hufflepuff                            Alte Runen\n9   Ravenclaw                           Arithmantik\n10  Ravenclaw                            Astronomie\n11  Ravenclaw                           Verwandlung\n12  Ravenclaw Verteidigung gegen die dunklen Künste\n13  Slytherin                          Zaubertränke\n14  Slytherin                           Zauberkunst\n15  Slytherin                         Dunkle Künste\n16  Slytherin                          Legilimentik\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## Wieviele Kurse haben es in die Auswahlliste geschafft?\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# unique()\nunique(Kurse$Kurs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Verteidigung gegen die dunklen Künste\"\n [2] \"Zauberkunst\"                          \n [3] \"Verwandlung\"                          \n [4] \"Besenflugunterricht\"                  \n [5] \"Kräuterkunde\"                         \n [6] \"Pflege magischer Geschöpfe\"           \n [7] \"Geschichte der Zauberei\"              \n [8] \"Alte Runen\"                           \n [9] \"Arithmantik\"                          \n[10] \"Astronomie\"                           \n[11] \"Zaubertränke\"                         \n[12] \"Dunkle Künste\"                        \n[13] \"Legilimentik\"                         \n```\n\n\n:::\n\n```{.r .cell-code}\nlength(unique(Kurse$Kurs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n:::\n\n\n\n\nEs sind 13 Kurse in der Liste.\n:::\n\n\n::: {.callout-tip}\n## c) Erstellen Sie für jedes Haus ein eigenes Datenframe\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subsets erstellen\ngryffindor <- subset(Kurse, Haus==\"Gryffindor\")\nhufflepuff <- subset(Kurse, Haus==\"Hufflepuff\")\nravenclaw <- subset(Kurse, Haus==\"Ravenclaw\")\nslytherin <- subset(Kurse, Haus==\"Slytherin\")\n```\n:::\n\n\n\n\n\n:::\n\n::: {.callout-tip}\n## d) Wandeln Sie in jedem Haus-Datenframe die Variablen in Faktoren um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subsets erstellen\ngryffindor$Kurs <- factor(gryffindor$Kurs)\ngryffindor$Haus <- factor(gryffindor$Haus)\n\nhufflepuff$Kurs <- factor(hufflepuff$Kurs)\nhufflepuff$Haus <- factor(hufflepuff$Haus)\n\nravenclaw$Kurs <- factor(ravenclaw$Kurs)\nravenclaw$Haus <- factor(ravenclaw$Haus)\n\nslytherin$Kurs <- factor(slytherin$Kurs)\nslytherin$Haus <- factor(slytherin$Haus)\n```\n:::\n\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## e) Fügen Sie die Haus-Datenframes zu einem einzigen Datenframe `Hogwarts` zusammen. Ändern Sie anschließend den Kurs \"*Geschichte der Zauberei*\" in \"*Zauberkunst*\" um.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Zusammenführen\nHogwarts <- rbind(gryffindor, hufflepuff, ravenclaw, slytherin)\n\n# Level ändern\nlevels(Hogwarts$Kurs)[levels(Hogwarts$Kurs)==\"Geschichte der Zauberei\"] <- \"Geisterkunde\"\n\n# anzeigen\nHogwarts$Kurs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] Verteidigung gegen die dunklen Künste Zauberkunst                          \n [3] Verwandlung                           Besenflugunterricht                  \n [5] Kräuterkunde                          Pflege magischer Geschöpfe           \n [7] Geisterkunde                          Alte Runen                           \n [9] Arithmantik                           Astronomie                           \n[11] Verwandlung                           Verteidigung gegen die dunklen Künste\n[13] Zaubertränke                          Zauberkunst                          \n[15] Dunkle Künste                         Legilimentik                         \n13 Levels: Besenflugunterricht ... Zaubertränke\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n::: {.callout-tip}\n## f) Sortieren Sie den Datensatz, so dass die Kurse in alphabetischer Reihenfolge angezeigt werden.\n\nWenn wir \"einfach so\" die `order()`-Funktion nutzen, erhalten wir eine falsche Ausgabe.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wird nicht korrekt sortiert\nHogwarts[order(Hogwarts$Kurs),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Haus                                  Kurs\n4  Gryffindor                   Besenflugunterricht\n1  Gryffindor Verteidigung gegen die dunklen Künste\n12  Ravenclaw Verteidigung gegen die dunklen Künste\n3  Gryffindor                           Verwandlung\n11  Ravenclaw                           Verwandlung\n2  Gryffindor                           Zauberkunst\n14  Slytherin                           Zauberkunst\n8  Hufflepuff                            Alte Runen\n7  Hufflepuff                          Geisterkunde\n5  Hufflepuff                          Kräuterkunde\n6  Hufflepuff            Pflege magischer Geschöpfe\n9   Ravenclaw                           Arithmantik\n10  Ravenclaw                            Astronomie\n15  Slytherin                         Dunkle Künste\n16  Slytherin                          Legilimentik\n13  Slytherin                          Zaubertränke\n```\n\n\n:::\n:::\n\n\n\n\nDas liegt daran, dass `Hogwarts$Kurs` als Factor vorliegt, und somit nach Levelreihenfolge sortiert wird.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Datenklasse Factor\nclass(Hogwarts$Kurs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n\n\n\nWir müssen daher die Funktion `as.character()` um die Variable wickeln, um eine alphabetische Sortierung zu erzwingen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# jetzt klappt es\nHogwarts[order(as.character(Hogwarts$Kurs)),]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Haus                                  Kurs\n8  Hufflepuff                            Alte Runen\n9   Ravenclaw                           Arithmantik\n10  Ravenclaw                            Astronomie\n4  Gryffindor                   Besenflugunterricht\n15  Slytherin                         Dunkle Künste\n7  Hufflepuff                          Geisterkunde\n5  Hufflepuff                          Kräuterkunde\n16  Slytherin                          Legilimentik\n6  Hufflepuff            Pflege magischer Geschöpfe\n1  Gryffindor Verteidigung gegen die dunklen Künste\n12  Ravenclaw Verteidigung gegen die dunklen Künste\n3  Gryffindor                           Verwandlung\n11  Ravenclaw                           Verwandlung\n2  Gryffindor                           Zauberkunst\n14  Slytherin                           Zauberkunst\n13  Slytherin                          Zaubertränke\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n\n### Lösung zur Aufgabe [-@sec-AAA07] Datentabelle {#sec-LAA07}\n\n::: {.callout-tip}\n## a) Übertragen Sie die Daten in das Datenframe `chol`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten übertragen\nchol <- data.frame(Name = c(\"Anna Tomie\", \"Bud Zillus\", \"Dieter Mietenplage\",\n                            \"Hella Scheinwerfer\", \"Inge Danken\", \"Jason Zufall\"),\n                   Geschlecht = c(\"W\", \"M\", \"M\", \"W\", \"W\", \"M\"),\n                   Gewicht = c(85, 115, 79, 60, 57, 96),\n                   Größe = c(179, 173, 181, 170, 158, 174),\n                   Cholesterol = c(182, 232, 191, 200, 148, 249)\n        )\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Geschlecht Gewicht Größe Cholesterol\n1         Anna Tomie          W      85   179         182\n2         Bud Zillus          M     115   173         232\n3 Dieter Mietenplage          M      79   181         191\n4 Hella Scheinwerfer          W      60   170         200\n5        Inge Danken          W      57   158         148\n6       Jason Zufall          M      96   174         249\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## b) Erstellen Sie eine neue Variable `Alter`, die zwischen `Name` und `Geschlecht` liegt\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten übertragen\nalter <- c(18, 32, 24, 35, 46, 68)\n\n# zwischen Name und Geschlecht einfügen\nchol <- data.frame(Name=chol$Name, Alter=alter, Geschlecht=chol$Geschlecht, \n                   Gewicht=chol$Gewicht, Größe=chol$Größe, \n                   Cholesterol=chol$Cholesterol)\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol\n1         Anna Tomie    18          W      85   179         182\n2         Bud Zillus    32          M     115   173         232\n3 Dieter Mietenplage    24          M      79   181         191\n4 Hella Scheinwerfer    35          W      60   170         200\n5        Inge Danken    46          W      57   158         148\n6       Jason Zufall    68          M      96   174         249\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n::: {.callout-tip}\n## c) Fügen Sie einen weiteren Fall mit folgenden Daten dem Datenframe hinzu.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Daten übertragen\nneu <- data.frame(Name=\"Mitch Mackes\", Alter=44, Geschlecht=\"M\", Gewicht=92,\n                  Größe=178, Cholesterol=220)\n\n# zusammenfügen\nchol <- rbind(chol, neu)\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol\n1         Anna Tomie    18          W      85   179         182\n2         Bud Zillus    32          M     115   173         232\n3 Dieter Mietenplage    24          M      79   181         191\n4 Hella Scheinwerfer    35          W      60   170         200\n5        Inge Danken    46          W      57   158         148\n6       Jason Zufall    68          M      96   174         249\n7       Mitch Mackes    44          M      92   178         220\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n::: {.callout-tip}\n## d) Erzeugen Sie eine neue Variable `BMI` ($\\text{BMI}=\\frac{kg}{m^2}$).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# BMI hinzufügen\n# Größe muss in Meter umgerechnet werden\nchol$BMI <- chol$Gewicht / (chol$Größe/100)^2\n\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol      BMI\n1         Anna Tomie    18          W      85   179         182 26.52851\n2         Bud Zillus    32          M     115   173         232 38.42427\n3 Dieter Mietenplage    24          M      79   181         191 24.11404\n4 Hella Scheinwerfer    35          W      60   170         200 20.76125\n5        Inge Danken    46          W      57   158         148 22.83288\n6       Jason Zufall    68          M      96   174         249 31.70828\n7       Mitch Mackes    44          M      92   178         220 29.03674\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.callout-tip}\n## e) Fügen Sie die Variable `Adipositas` hinzu, in welcher Sie die `BMI`-Werte klassieren\n\nEin Klassierung kann auf mehrere Weisen erfolgen.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# bedingtes Referenzieren\nchol$Adipositas[chol$BMI < 18.5] <- \"Untergewicht\"\nchol$Adipositas[chol$BMI >= 18.5 & chol$BMI < 24.5] <- \"Normalgewicht\"\nchol$Adipositas[chol$BMI >= 24.5 & chol$BMI < 30] <- \"Übergewicht\"\nchol$Adipositas[chol$BMI >= 30]   <- \"Adipositas\"\n\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol      BMI\n1         Anna Tomie    18          W      85   179         182 26.52851\n2         Bud Zillus    32          M     115   173         232 38.42427\n3 Dieter Mietenplage    24          M      79   181         191 24.11404\n4 Hella Scheinwerfer    35          W      60   170         200 20.76125\n5        Inge Danken    46          W      57   158         148 22.83288\n6       Jason Zufall    68          M      96   174         249 31.70828\n7       Mitch Mackes    44          M      92   178         220 29.03674\n     Adipositas\n1   Übergewicht\n2    Adipositas\n3 Normalgewicht\n4 Normalgewicht\n5 Normalgewicht\n6    Adipositas\n7   Übergewicht\n```\n\n\n:::\n:::\n\n\n\n\n\nAlternativ kann die `cut()`-Funktion verwendet werden.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# cut-Funktion\nchol$Adipositas <- cut(chol$BMI, breaks = c(0, 18.5, 24.5, 30, Inf), \n                       labels = c(\"Untergewicht\", \"Normalgewicht\", \n                                  \"Übergewicht\", \"Adipositas\"),\n                       right = FALSE)\n\n# anzeigen  \nchol\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol      BMI\n1         Anna Tomie    18          W      85   179         182 26.52851\n2         Bud Zillus    32          M     115   173         232 38.42427\n3 Dieter Mietenplage    24          M      79   181         191 24.11404\n4 Hella Scheinwerfer    35          W      60   170         200 20.76125\n5        Inge Danken    46          W      57   158         148 22.83288\n6       Jason Zufall    68          M      96   174         249 31.70828\n7       Mitch Mackes    44          M      92   178         220 29.03674\n     Adipositas\n1   Übergewicht\n2    Adipositas\n3 Normalgewicht\n4 Normalgewicht\n5 Normalgewicht\n6    Adipositas\n7   Übergewicht\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n\n::: {.callout-tip}\n## f) Filtern Sie Ihren Datensatz, so dass Sie einen neuen Datensatz `male` erhalten, welcher nur die Daten der Männer beinhaltet.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset erzeugen\nmale <- subset(chol, Geschlecht==\"M\")\n\n# anzeigen  \nmale\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                Name Alter Geschlecht Gewicht Größe Cholesterol      BMI\n2         Bud Zillus    32          M     115   173         232 38.42427\n3 Dieter Mietenplage    24          M      79   181         191 24.11404\n6       Jason Zufall    68          M      96   174         249 31.70828\n7       Mitch Mackes    44          M      92   178         220 29.03674\n     Adipositas\n2    Adipositas\n3 Normalgewicht\n6    Adipositas\n7   Übergewicht\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}